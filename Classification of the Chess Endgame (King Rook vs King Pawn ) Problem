{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "8551b75c613f41aeb893c8ee7364c36b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a807ecfd8a404e2aa4e27956f2e3b6b7",
              "IPY_MODEL_9807dbe7649a49b2b671764f4f4ba1ed",
              "IPY_MODEL_ad64b61f8eb04635b5440f7b2025437b"
            ],
            "layout": "IPY_MODEL_fda40affc0ca409ca54e681b2cc90308"
          }
        },
        "a807ecfd8a404e2aa4e27956f2e3b6b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8ccb7055b71e4c2aa73361446dbcd787",
            "placeholder": "​",
            "style": "IPY_MODEL_d3f90b7069c245e58cc25f07add30b67",
            "value": "Processing: 100%"
          }
        },
        "9807dbe7649a49b2b671764f4f4ba1ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3b1e1fcaaa094fa5a277321284b6e642",
            "max": 65,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_42c91b4f8e634b969961d6b989fa9ca3",
            "value": 65
          }
        },
        "ad64b61f8eb04635b5440f7b2025437b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_102804a8d7bb4c3ca9fafec37680a662",
            "placeholder": "​",
            "style": "IPY_MODEL_a5343cd809cd44718f6478f4e54907fd",
            "value": " 65/65 [01:49&lt;00:00,  1.19s/it]"
          }
        },
        "fda40affc0ca409ca54e681b2cc90308": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "8ccb7055b71e4c2aa73361446dbcd787": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d3f90b7069c245e58cc25f07add30b67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3b1e1fcaaa094fa5a277321284b6e642": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "42c91b4f8e634b969961d6b989fa9ca3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "102804a8d7bb4c3ca9fafec37680a662": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a5343cd809cd44718f6478f4e54907fd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Classification of the Chess Endgame problem\n",
        "\n",
        "This project focuses on the King-Rook vs. King-Pawn setup and attempts to use machine learning to predict chess endgame results. We employ three distinct machine learning techniques to analyze a dataset comprising more than 3,000 chess positions: Random Forest, Decision Trees, and Logistic Regression. Determining whether the player holding the King and Rook is in a winning position is the straightforward objective. Before entering our data into our models, we ensure that it is accurate and evenly distributed. After that, we carefully examine how well our models predict wins and losses as we train them. Predicting whether a particular position results in a win ('1') or not ('0') is the aim.\n",
        "\n",
        "#Dataset Information\n",
        "\n",
        "The KRKP (King-Rook vs. King-Pawn) dataset, which is well-known for its use in chess endgame predictive modeling, is used in this project. The dataset comprises 3,196 distinct instances, each of which represents a possible game position, and is carefully selected to represent a wide range of scenarios in the KRKP endgame. The features, which capture the spatial relations and piece positions essential to endgame strategy, are entirely categorical. With the aim of classifying the player with the King and Rook as either a winner or a loser, this dataset poses a challenging task that can be tackled by sophisticated machine learning methods.\n",
        "\n",
        "Each feature in this multivariate dataset corresponds to a different aspect of the chessboard configuration. The lack of missing values protects the data integrity and facilitates a more efficient preprocessing stage. The format of the dataset, which was initially obtained from the UCI Machine Learning Repository, complies with the strict guidelines for machine learning databases, ensuring consistency and dependability in the ensuing analytical procedures.\n",
        "\n",
        "The KRKP dataset serves as a cornerstone for this study, offering a strong foundation for the deployment and evaluation of our chosen machine learning algorithms by offering a rich tapestry of strategic game positions."
      ],
      "metadata": {
        "id": "Sk7Cq3JLfjge"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Loading the data and performing EDA"
      ],
      "metadata": {
        "id": "ea9HzRYxf1S_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "1VAj16X7eKNE",
        "outputId": "7128964c-c6af-40ea-f834-c88cf7685f21"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   f f.1 f.2 f.3 f.4 f.5 f.6 f.7 f.8 f.9  ... f.23 f.24 f.25 f.26 f.27 f.28  \\\n",
              "0  f   f   f   f   t   f   f   f   f   f  ...    f    f    f    f    f    f   \n",
              "1  f   f   f   f   t   f   t   f   f   f  ...    f    f    f    f    f    f   \n",
              "2  f   f   f   f   f   f   f   f   t   f  ...    f    f    f    f    f    f   \n",
              "3  f   f   f   f   f   f   f   f   f   f  ...    f    f    f    f    f    f   \n",
              "4  f   f   f   f   f   f   f   f   f   f  ...    f    f    t    f    f    f   \n",
              "\n",
              "  t.2 t.3 n.1  won  \n",
              "0   t   t   n  won  \n",
              "1   t   t   n  won  \n",
              "2   t   t   n  won  \n",
              "3   t   t   n  won  \n",
              "4   t   t   n  won  \n",
              "\n",
              "[5 rows x 37 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b9d55169-16a3-4971-94fb-192c275d229b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>f</th>\n",
              "      <th>f.1</th>\n",
              "      <th>f.2</th>\n",
              "      <th>f.3</th>\n",
              "      <th>f.4</th>\n",
              "      <th>f.5</th>\n",
              "      <th>f.6</th>\n",
              "      <th>f.7</th>\n",
              "      <th>f.8</th>\n",
              "      <th>f.9</th>\n",
              "      <th>...</th>\n",
              "      <th>f.23</th>\n",
              "      <th>f.24</th>\n",
              "      <th>f.25</th>\n",
              "      <th>f.26</th>\n",
              "      <th>f.27</th>\n",
              "      <th>f.28</th>\n",
              "      <th>t.2</th>\n",
              "      <th>t.3</th>\n",
              "      <th>n.1</th>\n",
              "      <th>won</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>n</td>\n",
              "      <td>won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>n</td>\n",
              "      <td>won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>n</td>\n",
              "      <td>won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>n</td>\n",
              "      <td>won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>n</td>\n",
              "      <td>won</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 37 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b9d55169-16a3-4971-94fb-192c275d229b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b9d55169-16a3-4971-94fb-192c275d229b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b9d55169-16a3-4971-94fb-192c275d229b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4e6a4acf-28db-4afe-b7ae-8c59a06aaf6f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e6a4acf-28db-4afe-b7ae-8c59a06aaf6f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4e6a4acf-28db-4afe-b7ae-8c59a06aaf6f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "df = pd.read_csv(\"/content/kr-vs-kp.data\")\n",
        "\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Display basic information about the dataset\n",
        "print(\"Dataset Overview:\")\n",
        "print(df.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RGhAlVXzg-Y8",
        "outputId": "438aec77-079b-459a-b874-ac7cf20ee4a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Overview:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3195 entries, 0 to 3194\n",
            "Data columns (total 37 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   f       3195 non-null   object\n",
            " 1   f.1     3195 non-null   object\n",
            " 2   f.2     3195 non-null   object\n",
            " 3   f.3     3195 non-null   object\n",
            " 4   f.4     3195 non-null   object\n",
            " 5   f.5     3195 non-null   object\n",
            " 6   f.6     3195 non-null   object\n",
            " 7   f.7     3195 non-null   object\n",
            " 8   f.8     3195 non-null   object\n",
            " 9   f.9     3195 non-null   object\n",
            " 10  f.10    3195 non-null   object\n",
            " 11  f.11    3195 non-null   object\n",
            " 12  l       3195 non-null   object\n",
            " 13  f.12    3195 non-null   object\n",
            " 14  n       3195 non-null   object\n",
            " 15  f.13    3195 non-null   object\n",
            " 16  f.14    3195 non-null   object\n",
            " 17  t       3195 non-null   object\n",
            " 18  f.15    3195 non-null   object\n",
            " 19  f.16    3195 non-null   object\n",
            " 20  f.17    3195 non-null   object\n",
            " 21  f.18    3195 non-null   object\n",
            " 22  f.19    3195 non-null   object\n",
            " 23  f.20    3195 non-null   object\n",
            " 24  f.21    3195 non-null   object\n",
            " 25  t.1     3195 non-null   object\n",
            " 26  f.22    3195 non-null   object\n",
            " 27  f.23    3195 non-null   object\n",
            " 28  f.24    3195 non-null   object\n",
            " 29  f.25    3195 non-null   object\n",
            " 30  f.26    3195 non-null   object\n",
            " 31  f.27    3195 non-null   object\n",
            " 32  f.28    3195 non-null   object\n",
            " 33  t.2     3195 non-null   object\n",
            " 34  t.3     3195 non-null   object\n",
            " 35  n.1     3195 non-null   object\n",
            " 36  won     3195 non-null   object\n",
            "dtypes: object(37)\n",
            "memory usage: 923.7+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Summary statistics for numerical features\n",
        "print(\"\\nSummary Statistics:\")\n",
        "print(df.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TT0oE9szhC_9",
        "outputId": "93d0ccc7-67d2-4f8f-8106-44dd1d65be67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Summary Statistics:\n",
            "           f   f.1   f.2   f.3   f.4   f.5   f.6   f.7   f.8   f.9  ...  f.23  \\\n",
            "count   3195  3195  3195  3195  3195  3195  3195  3195  3195  3195  ...  3195   \n",
            "unique     2     2     2     2     2     2     2     2     2     2  ...     2   \n",
            "top        f     f     f     f     f     f     f     f     f     f  ...     f   \n",
            "freq    2838  2970  3075  2873  2128  1721  2025  2499  1979  2224  ...  3194   \n",
            "\n",
            "        f.24  f.25  f.26  f.27  f.28   t.2   t.3   n.1   won  \n",
            "count   3195  3195  3195  3195  3195  3195  3195  3195  3195  \n",
            "unique     2     2     2     2     2     2     2     2     2  \n",
            "top        f     f     f     f     f     t     t     n   won  \n",
            "freq    3148  3059  2630  3020  1983  2006  2344  2406  1668  \n",
            "\n",
            "[4 rows x 37 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Check for missing values\n",
        "print(\"\\nMissing Values:\")\n",
        "print(df.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FlnQ7e9JhEwl",
        "outputId": "2887b026-3655-463c-c242-117581083f4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Missing Values:\n",
            "f       0\n",
            "f.1     0\n",
            "f.2     0\n",
            "f.3     0\n",
            "f.4     0\n",
            "f.5     0\n",
            "f.6     0\n",
            "f.7     0\n",
            "f.8     0\n",
            "f.9     0\n",
            "f.10    0\n",
            "f.11    0\n",
            "l       0\n",
            "f.12    0\n",
            "n       0\n",
            "f.13    0\n",
            "f.14    0\n",
            "t       0\n",
            "f.15    0\n",
            "f.16    0\n",
            "f.17    0\n",
            "f.18    0\n",
            "f.19    0\n",
            "f.20    0\n",
            "f.21    0\n",
            "t.1     0\n",
            "f.22    0\n",
            "f.23    0\n",
            "f.24    0\n",
            "f.25    0\n",
            "f.26    0\n",
            "f.27    0\n",
            "f.28    0\n",
            "t.2     0\n",
            "t.3     0\n",
            "n.1     0\n",
            "won     0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Explore the distribution of the target variable (\"won\")\n",
        "sns.countplot(x='won', data=df)\n",
        "plt.title(\"Distribution of 'won'\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ibkbnZUBhGh4",
        "outputId": "6a1b6907-ca68-4925-a93b-1b4d76708ef7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given that we are dealing with a classification task where the goal is to predict whether a certain chess position is a win or not (target variable \"won\"), we can consider several classification algorithms. Here are a few commonly used ones:\n",
        "\n",
        "#Logistic Regression:\n",
        "\n",
        "One supervised classification algorithm used for binary classification is logistic regression. The result is discrete and binary, ranging from 0 to 1. Measuring the correlation between the dependent variable and one or more independent variables is how this algorithm operates. Benefit: The algorithm can be regularized to prevent overfitting, and the outputs have a nice probabilistic interpretation. A drawback of logistic regression is that it often performs poorly in situations with multiple or nonlinear decision boundaries.\n",
        "\n",
        "#Decision Trees:\n",
        "\n",
        "An algorithm for predictive modeling called Random Forest is used for both regression and classification problems. With the default hyper parameter, it functions well. In a regression or classification problem, it can be used to rank the significance of variables. Benefit: By taking the average of multiple trees, the likelihood of overfitting is greatly reduced. A drawback is that training the samples takes longer.\n",
        "\n",
        "#Random Forest:\n",
        "\n",
        "It is one of the most widely used machine learning algorithms for both regression and classification tasks. Because it frequently mimics human thought processes, it is very easy to comprehend the data and arrive at insightful interpretations. Benefit: Decision trees don't need a lot of processing power to generate, comprehend, and perform classification. The use of decision trees is less suitable for estimation tasks involving the prediction of a continuous attribute's value.\n"
      ],
      "metadata": {
        "id": "eqI_M_Z6h0ci"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_encoded"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "V42mmTXijesf",
        "outputId": "055cb444-5a3e-4773-8133-7c707e11de77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      f_t  f.1_t  f.2_t  f.3_t  f.4_t  f.5_t  f.6_t  f.7_t  f.8_t  f.9_t  ...  \\\n",
              "0       0      0      0      0      1      0      0      0      0      0  ...   \n",
              "1       0      0      0      0      1      0      1      0      0      0  ...   \n",
              "2       0      0      0      0      0      0      0      0      1      0  ...   \n",
              "3       0      0      0      0      0      0      0      0      0      0  ...   \n",
              "4       0      0      0      0      0      0      0      0      0      0  ...   \n",
              "...   ...    ...    ...    ...    ...    ...    ...    ...    ...    ...  ...   \n",
              "3190    1      0      0      0      0      0      1      0      0      0  ...   \n",
              "3191    1      0      0      0      0      0      1      0      0      0  ...   \n",
              "3192    1      0      0      0      0      0      1      0      0      0  ...   \n",
              "3193    1      0      1      0      0      0      1      0      0      0  ...   \n",
              "3194    1      0      1      0      0      0      1      0      0      0  ...   \n",
              "\n",
              "      f.23_t  f.24_t  f.25_t  f.26_t  f.27_t  f.28_t  t.2_t  t.3_t  n.1_t  \\\n",
              "0          0       0       0       0       0       0      1      1      0   \n",
              "1          0       0       0       0       0       0      1      1      0   \n",
              "2          0       0       0       0       0       0      1      1      0   \n",
              "3          0       0       0       0       0       0      1      1      0   \n",
              "4          0       0       1       0       0       0      1      1      0   \n",
              "...      ...     ...     ...     ...     ...     ...    ...    ...    ...   \n",
              "3190       0       1       0       0       1       0      1      0      0   \n",
              "3191       0       1       0       0       1       0      1      0      0   \n",
              "3192       0       1       0       0       1       0      1      0      0   \n",
              "3193       0       1       0       0       1       0      0      0      0   \n",
              "3194       0       1       0       0       1       0      0      0      0   \n",
              "\n",
              "      won_won  \n",
              "0           1  \n",
              "1           1  \n",
              "2           1  \n",
              "3           1  \n",
              "4           1  \n",
              "...       ...  \n",
              "3190        0  \n",
              "3191        0  \n",
              "3192        0  \n",
              "3193        0  \n",
              "3194        0  \n",
              "\n",
              "[3195 rows x 38 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14c2e5ea-d17d-402f-9363-2b869a368433\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>f_t</th>\n",
              "      <th>f.1_t</th>\n",
              "      <th>f.2_t</th>\n",
              "      <th>f.3_t</th>\n",
              "      <th>f.4_t</th>\n",
              "      <th>f.5_t</th>\n",
              "      <th>f.6_t</th>\n",
              "      <th>f.7_t</th>\n",
              "      <th>f.8_t</th>\n",
              "      <th>f.9_t</th>\n",
              "      <th>...</th>\n",
              "      <th>f.23_t</th>\n",
              "      <th>f.24_t</th>\n",
              "      <th>f.25_t</th>\n",
              "      <th>f.26_t</th>\n",
              "      <th>f.27_t</th>\n",
              "      <th>f.28_t</th>\n",
              "      <th>t.2_t</th>\n",
              "      <th>t.3_t</th>\n",
              "      <th>n.1_t</th>\n",
              "      <th>won_won</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3190</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3191</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3192</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3193</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3194</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3195 rows × 38 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14c2e5ea-d17d-402f-9363-2b869a368433')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-14c2e5ea-d17d-402f-9363-2b869a368433 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-14c2e5ea-d17d-402f-9363-2b869a368433');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6bfaf918-42bd-4fc0-9ac8-ee03a9d0e84a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6bfaf918-42bd-4fc0-9ac8-ee03a9d0e84a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6bfaf918-42bd-4fc0-9ac8-ee03a9d0e84a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "\n",
        "# One-hot encode categorical features\n",
        "df_encoded = pd.get_dummies(df, drop_first=True)\n",
        "\n",
        "# Separate features and target variable\n",
        "X = df_encoded.drop('won_won', axis=1)\n",
        "y = df_encoded['won_won']\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "ssliSTExiEUY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Random Forest\n",
        "rf_model = RandomForestClassifier(random_state=123, n_estimators= 5, max_depth= 2)\n",
        "rf_model.fit(X_train, y_train)\n",
        "rf_predictions = rf_model.predict(X_test)\n"
      ],
      "metadata": {
        "id": "jTZ3WEiTjACi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Decision Tree\n",
        "dt_model=DecisionTreeClassifier()\n",
        "dt_model.fit(X_train,y_train)\n",
        "dt_predictions=dt_model.predict(X_test)"
      ],
      "metadata": {
        "id": "8n57L3hiCfnL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Logistic Regression\n",
        "lr_model = LogisticRegression(random_state=42)\n",
        "lr_model.fit(X_train, y_train)\n",
        "lr_predictions = lr_model.predict(X_test)\n"
      ],
      "metadata": {
        "id": "oLKrhidCjC06"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Evaluate models"
      ],
      "metadata": {
        "id": "ElccdMFajGfv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def evaluate_model(model_name, y_true, y_pred):\n",
        "    accuracy = accuracy_score(y_true, y_pred)\n",
        "    conf_matrix = confusion_matrix(y_true, y_pred)\n",
        "    class_report = classification_report(y_true, y_pred)\n",
        "\n",
        "    print(f\"{model_name} Model:\")\n",
        "    print(f\"Accuracy: {accuracy:.2f}\")\n",
        "    print(\"Confusion Matrix:\")\n",
        "    print(conf_matrix)\n",
        "    print(\"Classification Report:\")\n",
        "    print(class_report)\n",
        "    print(\"\\n\")\n",
        "\n",
        "# Evaluate Random Forest model\n",
        "evaluate_model(\"Random Forest\", y_test, rf_predictions)\n",
        "\n",
        "# Evaluate Decision Tree model\n",
        "evaluate_model(\"Decision Tree\", y_test, dt_predictions)\n",
        "\n",
        "# Evaluate Logistic Regression model\n",
        "evaluate_model(\"Logistic Regression\", y_test, lr_predictions)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQ_PonlajE5T",
        "outputId": "f87c35e0-4129-4884-dc3a-77772ffb1ec1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Model:\n",
            "Accuracy: 0.90\n",
            "Confusion Matrix:\n",
            "[[238  53]\n",
            " [  9 339]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.82      0.88       291\n",
            "           1       0.86      0.97      0.92       348\n",
            "\n",
            "    accuracy                           0.90       639\n",
            "   macro avg       0.91      0.90      0.90       639\n",
            "weighted avg       0.91      0.90      0.90       639\n",
            "\n",
            "\n",
            "\n",
            "Decision Tree Model:\n",
            "Accuracy: 1.00\n",
            "Confusion Matrix:\n",
            "[[291   0]\n",
            " [  1 347]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       291\n",
            "           1       1.00      1.00      1.00       348\n",
            "\n",
            "    accuracy                           1.00       639\n",
            "   macro avg       1.00      1.00      1.00       639\n",
            "weighted avg       1.00      1.00      1.00       639\n",
            "\n",
            "\n",
            "\n",
            "Logistic Regression Model:\n",
            "Accuracy: 0.97\n",
            "Confusion Matrix:\n",
            "[[277  14]\n",
            " [  8 340]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.95      0.96       291\n",
            "           1       0.96      0.98      0.97       348\n",
            "\n",
            "    accuracy                           0.97       639\n",
            "   macro avg       0.97      0.96      0.97       639\n",
            "weighted avg       0.97      0.97      0.97       639\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Evaluation\n",
        "\n",
        "\n",
        "Model Performance:\n",
        "\n",
        "- Random Forest Model:  Accuracy: 0.90\n",
        "- Logistic Regression Model:  Accuracy: 0.97\n",
        "- Decision Tree Model:  Accuracy: 1.00\n",
        "\n",
        "Analysis:\n",
        "\n",
        "Our analysis of the three machine learning models using the KRKP chess endgame dataset produced insightful findings that differed depending on the methodology.\n",
        "\n",
        "In terms of accuracy, in particular, logistic regression performed admirably, demonstrating its dependability as a viable option for win scenario prediction. Its recall rate was marginally lower, though, suggesting that some opportunities to identify every potential win were lost.\n",
        "\n",
        "Decision Trees demonstrated remarkable accuracy, approaching near-perfect scores. Despite being astounding, this result raised questions about the model's possible overfitting due to the dataset's complexity.\n",
        "\n",
        "\n",
        "By utilizing the potential of group learning, Random Forest demonstrated a robust equilibrium between recall, accuracy, and precision. It demonstrated exceptional proficiency in managing the multifaceted and intricate character of chess endgame situations, providing strong forecasts even in situations with greater ambiguity.\n",
        "\n",
        "\n",
        "These models' comparative analysis provided some fascinating new information. Even though the Decision Tree model had the best accuracy, its possible overfitting made it difficult to use in real-world scenarios. Conversely, the Random Forest model offered a more dependable and broadly applicable method for a variety of situations, despite its marginally lower accuracy. With its ease of use and respectable performance metrics, logistic regression provided a useful starting point for analysis.\n"
      ],
      "metadata": {
        "id": "pDy98Uybkbfj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pycaret\n"
      ],
      "metadata": {
        "id": "FFw1dH1MiLmS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1e6a521-5e5c-4a64-ba19-6236c72b6841"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pycaret in /usr/local/lib/python3.10/dist-packages (3.2.0)\n",
            "Requirement already satisfied: category-encoders>=2.4.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.6.3)\n",
            "Requirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.2.1)\n",
            "Requirement already satisfied: deprecation>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.0)\n",
            "Requirement already satisfied: imbalanced-learn>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.10.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.12.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (6.8.0)\n",
            "Requirement already satisfied: ipython>=5.5.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.6.5 in /usr/local/lib/python3.10/dist-packages (from pycaret) (7.7.1)\n",
            "Requirement already satisfied: jinja2>=1.2 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.1.2)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.3.2)\n",
            "Requirement already satisfied: kaleido>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.2.1)\n",
            "Requirement already satisfied: lightgbm>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (4.1.0)\n",
            "Requirement already satisfied: markupsafe>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.1.3)\n",
            "Requirement already satisfied: matplotlib<=3.6,>=3.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.6.0)\n",
            "Requirement already satisfied: nbformat>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.9.2)\n",
            "Requirement already satisfied: numba>=0.55.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.58.1)\n",
            "Requirement already satisfied: numpy<1.27,>=1.21 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.23.5)\n",
            "Requirement already satisfied: pandas<2.0.0,>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.5.3)\n",
            "Requirement already satisfied: plotly-resampler>=0.8.3.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.9.1)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.15.0)\n",
            "Requirement already satisfied: pmdarima!=1.8.1,<3.0.0,>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.0.4)\n",
            "Requirement already satisfied: psutil>=5.9.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (5.9.5)\n",
            "Requirement already satisfied: pyod>=1.0.8 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.1.2)\n",
            "Requirement already satisfied: requests>=2.27.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (2.31.0)\n",
            "Requirement already satisfied: schemdraw==0.15 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.15)\n",
            "Requirement already satisfied: scikit-learn<1.3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.2.2)\n",
            "Requirement already satisfied: scikit-plot>=0.3.7 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.3.7)\n",
            "Requirement already satisfied: scipy~=1.10.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.10.1)\n",
            "Requirement already satisfied: sktime!=0.17.1,!=0.17.2,!=0.18.0,<0.22.0,>=0.16.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.21.1)\n",
            "Requirement already satisfied: statsmodels>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from pycaret) (0.14.0)\n",
            "Requirement already satisfied: tbats>=1.1.3 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.1.3)\n",
            "Requirement already satisfied: tqdm>=4.62.0 in /usr/local/lib/python3.10/dist-packages (from pycaret) (4.66.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.4.1)\n",
            "Requirement already satisfied: yellowbrick>=1.4 in /usr/local/lib/python3.10/dist-packages (from pycaret) (1.5)\n",
            "Requirement already satisfied: wurlitzer in /usr/local/lib/python3.10/dist-packages (from pycaret) (3.0.3)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category-encoders>=2.4.0->pycaret) (0.5.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from deprecation>=2.1.0->pycaret) (23.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn>=0.8.1->pycaret) (3.2.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata>=4.12.0->pycaret) (3.17.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (67.7.2)\n",
            "Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.19.1)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.7.5)\n",
            "Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (5.7.1)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (3.0.41)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (2.16.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.5.0->pycaret) (4.8.0)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.6.6)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.6.5->pycaret) (3.0.9)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (4.44.3)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (1.4.5)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<=3.6,>=3.3.0->pycaret) (2.8.2)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (2.19.0)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (4.19.2)\n",
            "Requirement already satisfied: jupyter-core in /usr/local/lib/python3.10/dist-packages (from nbformat>=4.2.0->pycaret) (5.5.0)\n",
            "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.55.0->pycaret) (0.41.1)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<2.0.0,>=1.3.0->pycaret) (2023.3.post1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.0.0->pycaret) (8.2.3)\n",
            "Requirement already satisfied: dash<3.0.0,>=2.11.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (2.14.2)\n",
            "Requirement already satisfied: orjson<4.0.0,>=3.8.0 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (3.9.10)\n",
            "Requirement already satisfied: trace-updater>=0.0.8 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (0.0.9.1)\n",
            "Requirement already satisfied: tsdownsample==0.1.2 in /usr/local/lib/python3.10/dist-packages (from plotly-resampler>=0.8.3.1->pycaret) (0.1.2)\n",
            "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret) (3.0.5)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima!=1.8.1,<3.0.0,>=1.8.0->pycaret) (2.0.7)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from pyod>=1.0.8->pycaret) (1.16.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (3.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.27.1->pycaret) (2023.7.22)\n",
            "Requirement already satisfied: deprecated>=1.2.13 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,<0.22.0,>=0.16.1->pycaret) (1.2.14)\n",
            "Requirement already satisfied: scikit-base<0.6.0 in /usr/local/lib/python3.10/dist-packages (from sktime!=0.17.1,!=0.17.2,!=0.18.0,<0.22.0,>=0.16.1->pycaret) (0.5.2)\n",
            "Requirement already satisfied: Flask<3.1,>=1.0.4 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (2.2.5)\n",
            "Requirement already satisfied: Werkzeug<3.1 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (3.0.1)\n",
            "Requirement already satisfied: dash-html-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-core-components==2.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (2.0.0)\n",
            "Requirement already satisfied: dash-table==5.0.0 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (5.0.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (4.5.0)\n",
            "Requirement already satisfied: retrying in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (1.3.4)\n",
            "Requirement already satisfied: ansi2html in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (1.8.0)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.10/dist-packages (from dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (1.5.8)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.13->sktime!=0.17.1,!=0.17.2,!=0.18.0,<0.22.0,>=0.16.1->pycaret) (1.14.1)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.6.5->pycaret) (6.3.2)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.5.0->pycaret) (0.8.3)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (23.1.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (2023.11.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.31.0)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat>=4.2.0->pycaret) (0.13.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.5.0->pycaret) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.5.0->pycaret) (0.2.10)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.5)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core->nbformat>=4.2.0->pycaret) (4.0.0)\n",
            "Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (2.1.2)\n",
            "Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask<3.1,>=1.0.4->dash<3.0.0,>=2.11.0->plotly-resampler>=0.8.3.1->pycaret) (8.1.7)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.2.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (23.1.0)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.5.4)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.18.0)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.18.0)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.0.0)\n",
            "Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.24.0)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.3)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.9.3)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (4.11.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (6.1.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.2.2)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.9.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.5.0)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.2.1)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (21.2.0)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.6.4)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.16.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.5)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (0.5.1)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.3.0)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (1.1.3)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.6.5->pycaret) (2.21)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pycaret.classification import *\n",
        "s = setup(df, target = 'won', session_id = 123)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 770
        },
        "id": "5dLno8TfEJxB",
        "outputId": "215f8abe-3462-400c-f722-428cb4e85f6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7e80f6c8e620>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_19037_row10_col1 {\n",
              "  background-color: lightgreen;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_19037\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_19037_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
              "      <th id=\"T_19037_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_19037_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
              "      <td id=\"T_19037_row0_col1\" class=\"data row0 col1\" >123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_19037_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
              "      <td id=\"T_19037_row1_col1\" class=\"data row1 col1\" >won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_19037_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
              "      <td id=\"T_19037_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_19037_row3_col0\" class=\"data row3 col0\" >Target mapping</td>\n",
              "      <td id=\"T_19037_row3_col1\" class=\"data row3 col1\" >nowin: 0, won: 1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_19037_row4_col0\" class=\"data row4 col0\" >Original data shape</td>\n",
              "      <td id=\"T_19037_row4_col1\" class=\"data row4 col1\" >(3195, 37)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_19037_row5_col0\" class=\"data row5 col0\" >Transformed data shape</td>\n",
              "      <td id=\"T_19037_row5_col1\" class=\"data row5 col1\" >(3195, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_19037_row6_col0\" class=\"data row6 col0\" >Transformed train set shape</td>\n",
              "      <td id=\"T_19037_row6_col1\" class=\"data row6 col1\" >(2236, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_19037_row7_col0\" class=\"data row7 col0\" >Transformed test set shape</td>\n",
              "      <td id=\"T_19037_row7_col1\" class=\"data row7 col1\" >(959, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_19037_row8_col0\" class=\"data row8 col0\" >Ordinal features</td>\n",
              "      <td id=\"T_19037_row8_col1\" class=\"data row8 col1\" >34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_19037_row9_col0\" class=\"data row9 col0\" >Categorical features</td>\n",
              "      <td id=\"T_19037_row9_col1\" class=\"data row9 col1\" >36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_19037_row10_col0\" class=\"data row10 col0\" >Preprocess</td>\n",
              "      <td id=\"T_19037_row10_col1\" class=\"data row10 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_19037_row11_col0\" class=\"data row11 col0\" >Imputation type</td>\n",
              "      <td id=\"T_19037_row11_col1\" class=\"data row11 col1\" >simple</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_19037_row12_col0\" class=\"data row12 col0\" >Numeric imputation</td>\n",
              "      <td id=\"T_19037_row12_col1\" class=\"data row12 col1\" >mean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_19037_row13_col0\" class=\"data row13 col0\" >Categorical imputation</td>\n",
              "      <td id=\"T_19037_row13_col1\" class=\"data row13 col1\" >mode</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_19037_row14_col0\" class=\"data row14 col0\" >Maximum one-hot encoding</td>\n",
              "      <td id=\"T_19037_row14_col1\" class=\"data row14 col1\" >25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_19037_row15_col0\" class=\"data row15 col0\" >Encoding method</td>\n",
              "      <td id=\"T_19037_row15_col1\" class=\"data row15 col1\" >None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_19037_row16_col0\" class=\"data row16 col0\" >Fold Generator</td>\n",
              "      <td id=\"T_19037_row16_col1\" class=\"data row16 col1\" >StratifiedKFold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_19037_row17_col0\" class=\"data row17 col0\" >Fold Number</td>\n",
              "      <td id=\"T_19037_row17_col1\" class=\"data row17 col1\" >10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_19037_row18_col0\" class=\"data row18 col0\" >CPU Jobs</td>\n",
              "      <td id=\"T_19037_row18_col1\" class=\"data row18 col1\" >-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "      <td id=\"T_19037_row19_col0\" class=\"data row19 col0\" >Use GPU</td>\n",
              "      <td id=\"T_19037_row19_col1\" class=\"data row19 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
              "      <td id=\"T_19037_row20_col0\" class=\"data row20 col0\" >Log Experiment</td>\n",
              "      <td id=\"T_19037_row20_col1\" class=\"data row20 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
              "      <td id=\"T_19037_row21_col0\" class=\"data row21 col0\" >Experiment Name</td>\n",
              "      <td id=\"T_19037_row21_col1\" class=\"data row21 col1\" >clf-default-name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_19037_level0_row22\" class=\"row_heading level0 row22\" >22</th>\n",
              "      <td id=\"T_19037_row22_col0\" class=\"data row22 col0\" >USI</td>\n",
              "      <td id=\"T_19037_row22_col1\" class=\"data row22 col1\" >d1c0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# import ClassificationExperiment and init the class\n",
        "from pycaret.classification import ClassificationExperiment\n",
        "exp = ClassificationExperiment()\n",
        "\n",
        "# init setup on exp\n",
        "exp.setup(df, target = 'won', session_id = 123)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 788
        },
        "id": "O4OgQ9KHE4DQ",
        "outputId": "80042f16-a8a2-4e56-9686-5fa161b71abe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7e80f67f5e70>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_efa24_row10_col1 {\n",
              "  background-color: lightgreen;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_efa24\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_efa24_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
              "      <th id=\"T_efa24_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_efa24_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
              "      <td id=\"T_efa24_row0_col1\" class=\"data row0 col1\" >123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_efa24_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
              "      <td id=\"T_efa24_row1_col1\" class=\"data row1 col1\" >won</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_efa24_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
              "      <td id=\"T_efa24_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_efa24_row3_col0\" class=\"data row3 col0\" >Target mapping</td>\n",
              "      <td id=\"T_efa24_row3_col1\" class=\"data row3 col1\" >nowin: 0, won: 1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_efa24_row4_col0\" class=\"data row4 col0\" >Original data shape</td>\n",
              "      <td id=\"T_efa24_row4_col1\" class=\"data row4 col1\" >(3195, 37)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_efa24_row5_col0\" class=\"data row5 col0\" >Transformed data shape</td>\n",
              "      <td id=\"T_efa24_row5_col1\" class=\"data row5 col1\" >(3195, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_efa24_row6_col0\" class=\"data row6 col0\" >Transformed train set shape</td>\n",
              "      <td id=\"T_efa24_row6_col1\" class=\"data row6 col1\" >(2236, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_efa24_row7_col0\" class=\"data row7 col0\" >Transformed test set shape</td>\n",
              "      <td id=\"T_efa24_row7_col1\" class=\"data row7 col1\" >(959, 39)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_efa24_row8_col0\" class=\"data row8 col0\" >Ordinal features</td>\n",
              "      <td id=\"T_efa24_row8_col1\" class=\"data row8 col1\" >34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_efa24_row9_col0\" class=\"data row9 col0\" >Categorical features</td>\n",
              "      <td id=\"T_efa24_row9_col1\" class=\"data row9 col1\" >36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_efa24_row10_col0\" class=\"data row10 col0\" >Preprocess</td>\n",
              "      <td id=\"T_efa24_row10_col1\" class=\"data row10 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_efa24_row11_col0\" class=\"data row11 col0\" >Imputation type</td>\n",
              "      <td id=\"T_efa24_row11_col1\" class=\"data row11 col1\" >simple</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_efa24_row12_col0\" class=\"data row12 col0\" >Numeric imputation</td>\n",
              "      <td id=\"T_efa24_row12_col1\" class=\"data row12 col1\" >mean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_efa24_row13_col0\" class=\"data row13 col0\" >Categorical imputation</td>\n",
              "      <td id=\"T_efa24_row13_col1\" class=\"data row13 col1\" >mode</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_efa24_row14_col0\" class=\"data row14 col0\" >Maximum one-hot encoding</td>\n",
              "      <td id=\"T_efa24_row14_col1\" class=\"data row14 col1\" >25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_efa24_row15_col0\" class=\"data row15 col0\" >Encoding method</td>\n",
              "      <td id=\"T_efa24_row15_col1\" class=\"data row15 col1\" >None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_efa24_row16_col0\" class=\"data row16 col0\" >Fold Generator</td>\n",
              "      <td id=\"T_efa24_row16_col1\" class=\"data row16 col1\" >StratifiedKFold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_efa24_row17_col0\" class=\"data row17 col0\" >Fold Number</td>\n",
              "      <td id=\"T_efa24_row17_col1\" class=\"data row17 col1\" >10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_efa24_row18_col0\" class=\"data row18 col0\" >CPU Jobs</td>\n",
              "      <td id=\"T_efa24_row18_col1\" class=\"data row18 col1\" >-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "      <td id=\"T_efa24_row19_col0\" class=\"data row19 col0\" >Use GPU</td>\n",
              "      <td id=\"T_efa24_row19_col1\" class=\"data row19 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
              "      <td id=\"T_efa24_row20_col0\" class=\"data row20 col0\" >Log Experiment</td>\n",
              "      <td id=\"T_efa24_row20_col1\" class=\"data row20 col1\" >False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
              "      <td id=\"T_efa24_row21_col0\" class=\"data row21 col0\" >Experiment Name</td>\n",
              "      <td id=\"T_efa24_row21_col1\" class=\"data row21 col1\" >clf-default-name</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_efa24_level0_row22\" class=\"row_heading level0 row22\" >22</th>\n",
              "      <td id=\"T_efa24_row22_col0\" class=\"data row22 col0\" >USI</td>\n",
              "      <td id=\"T_efa24_row22_col1\" class=\"data row22 col1\" >9b3f</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pycaret.classification.oop.ClassificationExperiment at 0x7e81181bf6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# compare baseline models\n",
        "best = compare_models()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519,
          "referenced_widgets": [
            "8551b75c613f41aeb893c8ee7364c36b",
            "a807ecfd8a404e2aa4e27956f2e3b6b7",
            "9807dbe7649a49b2b671764f4f4ba1ed",
            "ad64b61f8eb04635b5440f7b2025437b",
            "fda40affc0ca409ca54e681b2cc90308",
            "8ccb7055b71e4c2aa73361446dbcd787",
            "d3f90b7069c245e58cc25f07add30b67",
            "3b1e1fcaaa094fa5a277321284b6e642",
            "42c91b4f8e634b969961d6b989fa9ca3",
            "102804a8d7bb4c3ca9fafec37680a662",
            "a5343cd809cd44718f6478f4e54907fd"
          ]
        },
        "id": "Dw9_5lA9FLpo",
        "outputId": "a027e1ab-5f47-4f5a-c768-00eaf621e6cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7e81607982e0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_d5f14 th {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_d5f14_row0_col0, #T_d5f14_row0_col2, #T_d5f14_row1_col0, #T_d5f14_row1_col1, #T_d5f14_row1_col2, #T_d5f14_row1_col3, #T_d5f14_row1_col4, #T_d5f14_row1_col5, #T_d5f14_row1_col6, #T_d5f14_row1_col7, #T_d5f14_row2_col0, #T_d5f14_row2_col1, #T_d5f14_row2_col3, #T_d5f14_row2_col4, #T_d5f14_row2_col5, #T_d5f14_row2_col6, #T_d5f14_row2_col7, #T_d5f14_row3_col0, #T_d5f14_row3_col1, #T_d5f14_row3_col2, #T_d5f14_row3_col3, #T_d5f14_row3_col4, #T_d5f14_row3_col5, #T_d5f14_row3_col6, #T_d5f14_row3_col7, #T_d5f14_row4_col0, #T_d5f14_row4_col1, #T_d5f14_row4_col2, #T_d5f14_row4_col3, #T_d5f14_row4_col4, #T_d5f14_row4_col5, #T_d5f14_row4_col6, #T_d5f14_row4_col7, #T_d5f14_row5_col0, #T_d5f14_row5_col1, #T_d5f14_row5_col2, #T_d5f14_row5_col3, #T_d5f14_row5_col4, #T_d5f14_row5_col5, #T_d5f14_row5_col6, #T_d5f14_row5_col7, #T_d5f14_row6_col0, #T_d5f14_row6_col1, #T_d5f14_row6_col2, #T_d5f14_row6_col3, #T_d5f14_row6_col4, #T_d5f14_row6_col5, #T_d5f14_row6_col6, #T_d5f14_row6_col7, #T_d5f14_row7_col0, #T_d5f14_row7_col1, #T_d5f14_row7_col2, #T_d5f14_row7_col3, #T_d5f14_row7_col4, #T_d5f14_row7_col5, #T_d5f14_row7_col6, #T_d5f14_row7_col7, #T_d5f14_row8_col0, #T_d5f14_row8_col1, #T_d5f14_row8_col2, #T_d5f14_row8_col3, #T_d5f14_row8_col4, #T_d5f14_row8_col5, #T_d5f14_row8_col6, #T_d5f14_row8_col7, #T_d5f14_row9_col0, #T_d5f14_row9_col1, #T_d5f14_row9_col2, #T_d5f14_row9_col3, #T_d5f14_row9_col4, #T_d5f14_row9_col5, #T_d5f14_row9_col6, #T_d5f14_row9_col7, #T_d5f14_row10_col0, #T_d5f14_row10_col1, #T_d5f14_row10_col2, #T_d5f14_row10_col3, #T_d5f14_row10_col4, #T_d5f14_row10_col5, #T_d5f14_row10_col6, #T_d5f14_row10_col7, #T_d5f14_row11_col0, #T_d5f14_row11_col1, #T_d5f14_row11_col2, #T_d5f14_row11_col3, #T_d5f14_row11_col4, #T_d5f14_row11_col5, #T_d5f14_row11_col6, #T_d5f14_row11_col7, #T_d5f14_row12_col0, #T_d5f14_row12_col1, #T_d5f14_row12_col2, #T_d5f14_row12_col3, #T_d5f14_row12_col4, #T_d5f14_row12_col5, #T_d5f14_row12_col6, #T_d5f14_row12_col7, #T_d5f14_row13_col0, #T_d5f14_row13_col1, #T_d5f14_row13_col2, #T_d5f14_row13_col3, #T_d5f14_row13_col4, #T_d5f14_row13_col5, #T_d5f14_row13_col6, #T_d5f14_row13_col7, #T_d5f14_row14_col0, #T_d5f14_row14_col1, #T_d5f14_row14_col2, #T_d5f14_row14_col3, #T_d5f14_row14_col4, #T_d5f14_row14_col5, #T_d5f14_row14_col6, #T_d5f14_row14_col7 {\n",
              "  text-align: left;\n",
              "}\n",
              "#T_d5f14_row0_col1, #T_d5f14_row0_col3, #T_d5f14_row0_col4, #T_d5f14_row0_col5, #T_d5f14_row0_col6, #T_d5f14_row0_col7, #T_d5f14_row2_col2 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "}\n",
              "#T_d5f14_row0_col8, #T_d5f14_row1_col8, #T_d5f14_row2_col8, #T_d5f14_row3_col8, #T_d5f14_row4_col8, #T_d5f14_row5_col8, #T_d5f14_row6_col8, #T_d5f14_row7_col8, #T_d5f14_row9_col8, #T_d5f14_row10_col8, #T_d5f14_row11_col8, #T_d5f14_row12_col8, #T_d5f14_row13_col8, #T_d5f14_row14_col8 {\n",
              "  text-align: left;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "#T_d5f14_row8_col8 {\n",
              "  text-align: left;\n",
              "  background-color: yellow;\n",
              "  background-color: lightgrey;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_d5f14\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_d5f14_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
              "      <th id=\"T_d5f14_level0_col1\" class=\"col_heading level0 col1\" >Accuracy</th>\n",
              "      <th id=\"T_d5f14_level0_col2\" class=\"col_heading level0 col2\" >AUC</th>\n",
              "      <th id=\"T_d5f14_level0_col3\" class=\"col_heading level0 col3\" >Recall</th>\n",
              "      <th id=\"T_d5f14_level0_col4\" class=\"col_heading level0 col4\" >Prec.</th>\n",
              "      <th id=\"T_d5f14_level0_col5\" class=\"col_heading level0 col5\" >F1</th>\n",
              "      <th id=\"T_d5f14_level0_col6\" class=\"col_heading level0 col6\" >Kappa</th>\n",
              "      <th id=\"T_d5f14_level0_col7\" class=\"col_heading level0 col7\" >MCC</th>\n",
              "      <th id=\"T_d5f14_level0_col8\" class=\"col_heading level0 col8\" >TT (Sec)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row0\" class=\"row_heading level0 row0\" >dt</th>\n",
              "      <td id=\"T_d5f14_row0_col0\" class=\"data row0 col0\" >Decision Tree Classifier</td>\n",
              "      <td id=\"T_d5f14_row0_col1\" class=\"data row0 col1\" >0.9933</td>\n",
              "      <td id=\"T_d5f14_row0_col2\" class=\"data row0 col2\" >0.9932</td>\n",
              "      <td id=\"T_d5f14_row0_col3\" class=\"data row0 col3\" >0.9933</td>\n",
              "      <td id=\"T_d5f14_row0_col4\" class=\"data row0 col4\" >0.9933</td>\n",
              "      <td id=\"T_d5f14_row0_col5\" class=\"data row0 col5\" >0.9933</td>\n",
              "      <td id=\"T_d5f14_row0_col6\" class=\"data row0 col6\" >0.9866</td>\n",
              "      <td id=\"T_d5f14_row0_col7\" class=\"data row0 col7\" >0.9866</td>\n",
              "      <td id=\"T_d5f14_row0_col8\" class=\"data row0 col8\" >0.6410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row1\" class=\"row_heading level0 row1\" >xgboost</th>\n",
              "      <td id=\"T_d5f14_row1_col0\" class=\"data row1 col0\" >Extreme Gradient Boosting</td>\n",
              "      <td id=\"T_d5f14_row1_col1\" class=\"data row1 col1\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row1_col2\" class=\"data row1 col2\" >0.9996</td>\n",
              "      <td id=\"T_d5f14_row1_col3\" class=\"data row1 col3\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row1_col4\" class=\"data row1 col4\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row1_col5\" class=\"data row1 col5\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row1_col6\" class=\"data row1 col6\" >0.9830</td>\n",
              "      <td id=\"T_d5f14_row1_col7\" class=\"data row1 col7\" >0.9830</td>\n",
              "      <td id=\"T_d5f14_row1_col8\" class=\"data row1 col8\" >0.7300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row2\" class=\"row_heading level0 row2\" >lightgbm</th>\n",
              "      <td id=\"T_d5f14_row2_col0\" class=\"data row2 col0\" >Light Gradient Boosting Machine</td>\n",
              "      <td id=\"T_d5f14_row2_col1\" class=\"data row2 col1\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row2_col2\" class=\"data row2 col2\" >0.9997</td>\n",
              "      <td id=\"T_d5f14_row2_col3\" class=\"data row2 col3\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row2_col4\" class=\"data row2 col4\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row2_col5\" class=\"data row2 col5\" >0.9915</td>\n",
              "      <td id=\"T_d5f14_row2_col6\" class=\"data row2 col6\" >0.9830</td>\n",
              "      <td id=\"T_d5f14_row2_col7\" class=\"data row2 col7\" >0.9830</td>\n",
              "      <td id=\"T_d5f14_row2_col8\" class=\"data row2 col8\" >1.0620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row3\" class=\"row_heading level0 row3\" >rf</th>\n",
              "      <td id=\"T_d5f14_row3_col0\" class=\"data row3 col0\" >Random Forest Classifier</td>\n",
              "      <td id=\"T_d5f14_row3_col1\" class=\"data row3 col1\" >0.9852</td>\n",
              "      <td id=\"T_d5f14_row3_col2\" class=\"data row3 col2\" >0.9988</td>\n",
              "      <td id=\"T_d5f14_row3_col3\" class=\"data row3 col3\" >0.9852</td>\n",
              "      <td id=\"T_d5f14_row3_col4\" class=\"data row3 col4\" >0.9854</td>\n",
              "      <td id=\"T_d5f14_row3_col5\" class=\"data row3 col5\" >0.9852</td>\n",
              "      <td id=\"T_d5f14_row3_col6\" class=\"data row3 col6\" >0.9704</td>\n",
              "      <td id=\"T_d5f14_row3_col7\" class=\"data row3 col7\" >0.9706</td>\n",
              "      <td id=\"T_d5f14_row3_col8\" class=\"data row3 col8\" >0.8540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row4\" class=\"row_heading level0 row4\" >et</th>\n",
              "      <td id=\"T_d5f14_row4_col0\" class=\"data row4 col0\" >Extra Trees Classifier</td>\n",
              "      <td id=\"T_d5f14_row4_col1\" class=\"data row4 col1\" >0.9848</td>\n",
              "      <td id=\"T_d5f14_row4_col2\" class=\"data row4 col2\" >0.9983</td>\n",
              "      <td id=\"T_d5f14_row4_col3\" class=\"data row4 col3\" >0.9848</td>\n",
              "      <td id=\"T_d5f14_row4_col4\" class=\"data row4 col4\" >0.9850</td>\n",
              "      <td id=\"T_d5f14_row4_col5\" class=\"data row4 col5\" >0.9848</td>\n",
              "      <td id=\"T_d5f14_row4_col6\" class=\"data row4 col6\" >0.9695</td>\n",
              "      <td id=\"T_d5f14_row4_col7\" class=\"data row4 col7\" >0.9697</td>\n",
              "      <td id=\"T_d5f14_row4_col8\" class=\"data row4 col8\" >0.6660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row5\" class=\"row_heading level0 row5\" >gbc</th>\n",
              "      <td id=\"T_d5f14_row5_col0\" class=\"data row5 col0\" >Gradient Boosting Classifier</td>\n",
              "      <td id=\"T_d5f14_row5_col1\" class=\"data row5 col1\" >0.9808</td>\n",
              "      <td id=\"T_d5f14_row5_col2\" class=\"data row5 col2\" >0.9978</td>\n",
              "      <td id=\"T_d5f14_row5_col3\" class=\"data row5 col3\" >0.9808</td>\n",
              "      <td id=\"T_d5f14_row5_col4\" class=\"data row5 col4\" >0.9813</td>\n",
              "      <td id=\"T_d5f14_row5_col5\" class=\"data row5 col5\" >0.9808</td>\n",
              "      <td id=\"T_d5f14_row5_col6\" class=\"data row5 col6\" >0.9615</td>\n",
              "      <td id=\"T_d5f14_row5_col7\" class=\"data row5 col7\" >0.9620</td>\n",
              "      <td id=\"T_d5f14_row5_col8\" class=\"data row5 col8\" >0.8120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row6\" class=\"row_heading level0 row6\" >ada</th>\n",
              "      <td id=\"T_d5f14_row6_col0\" class=\"data row6 col0\" >Ada Boost Classifier</td>\n",
              "      <td id=\"T_d5f14_row6_col1\" class=\"data row6 col1\" >0.9660</td>\n",
              "      <td id=\"T_d5f14_row6_col2\" class=\"data row6 col2\" >0.9935</td>\n",
              "      <td id=\"T_d5f14_row6_col3\" class=\"data row6 col3\" >0.9660</td>\n",
              "      <td id=\"T_d5f14_row6_col4\" class=\"data row6 col4\" >0.9664</td>\n",
              "      <td id=\"T_d5f14_row6_col5\" class=\"data row6 col5\" >0.9660</td>\n",
              "      <td id=\"T_d5f14_row6_col6\" class=\"data row6 col6\" >0.9319</td>\n",
              "      <td id=\"T_d5f14_row6_col7\" class=\"data row6 col7\" >0.9322</td>\n",
              "      <td id=\"T_d5f14_row6_col8\" class=\"data row6 col8\" >1.0370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row7\" class=\"row_heading level0 row7\" >lr</th>\n",
              "      <td id=\"T_d5f14_row7_col0\" class=\"data row7 col0\" >Logistic Regression</td>\n",
              "      <td id=\"T_d5f14_row7_col1\" class=\"data row7 col1\" >0.9624</td>\n",
              "      <td id=\"T_d5f14_row7_col2\" class=\"data row7 col2\" >0.9933</td>\n",
              "      <td id=\"T_d5f14_row7_col3\" class=\"data row7 col3\" >0.9624</td>\n",
              "      <td id=\"T_d5f14_row7_col4\" class=\"data row7 col4\" >0.9629</td>\n",
              "      <td id=\"T_d5f14_row7_col5\" class=\"data row7 col5\" >0.9624</td>\n",
              "      <td id=\"T_d5f14_row7_col6\" class=\"data row7 col6\" >0.9247</td>\n",
              "      <td id=\"T_d5f14_row7_col7\" class=\"data row7 col7\" >0.9251</td>\n",
              "      <td id=\"T_d5f14_row7_col8\" class=\"data row7 col8\" >1.2740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row8\" class=\"row_heading level0 row8\" >svm</th>\n",
              "      <td id=\"T_d5f14_row8_col0\" class=\"data row8 col0\" >SVM - Linear Kernel</td>\n",
              "      <td id=\"T_d5f14_row8_col1\" class=\"data row8 col1\" >0.9606</td>\n",
              "      <td id=\"T_d5f14_row8_col2\" class=\"data row8 col2\" >0.0000</td>\n",
              "      <td id=\"T_d5f14_row8_col3\" class=\"data row8 col3\" >0.9606</td>\n",
              "      <td id=\"T_d5f14_row8_col4\" class=\"data row8 col4\" >0.9612</td>\n",
              "      <td id=\"T_d5f14_row8_col5\" class=\"data row8 col5\" >0.9606</td>\n",
              "      <td id=\"T_d5f14_row8_col6\" class=\"data row8 col6\" >0.9212</td>\n",
              "      <td id=\"T_d5f14_row8_col7\" class=\"data row8 col7\" >0.9217</td>\n",
              "      <td id=\"T_d5f14_row8_col8\" class=\"data row8 col8\" >0.4320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row9\" class=\"row_heading level0 row9\" >knn</th>\n",
              "      <td id=\"T_d5f14_row9_col0\" class=\"data row9 col0\" >K Neighbors Classifier</td>\n",
              "      <td id=\"T_d5f14_row9_col1\" class=\"data row9 col1\" >0.9508</td>\n",
              "      <td id=\"T_d5f14_row9_col2\" class=\"data row9 col2\" >0.9837</td>\n",
              "      <td id=\"T_d5f14_row9_col3\" class=\"data row9 col3\" >0.9508</td>\n",
              "      <td id=\"T_d5f14_row9_col4\" class=\"data row9 col4\" >0.9513</td>\n",
              "      <td id=\"T_d5f14_row9_col5\" class=\"data row9 col5\" >0.9508</td>\n",
              "      <td id=\"T_d5f14_row9_col6\" class=\"data row9 col6\" >0.9014</td>\n",
              "      <td id=\"T_d5f14_row9_col7\" class=\"data row9 col7\" >0.9019</td>\n",
              "      <td id=\"T_d5f14_row9_col8\" class=\"data row9 col8\" >0.4440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row10\" class=\"row_heading level0 row10\" >ridge</th>\n",
              "      <td id=\"T_d5f14_row10_col0\" class=\"data row10 col0\" >Ridge Classifier</td>\n",
              "      <td id=\"T_d5f14_row10_col1\" class=\"data row10 col1\" >0.9468</td>\n",
              "      <td id=\"T_d5f14_row10_col2\" class=\"data row10 col2\" >0.0000</td>\n",
              "      <td id=\"T_d5f14_row10_col3\" class=\"data row10 col3\" >0.9468</td>\n",
              "      <td id=\"T_d5f14_row10_col4\" class=\"data row10 col4\" >0.9479</td>\n",
              "      <td id=\"T_d5f14_row10_col5\" class=\"data row10 col5\" >0.9467</td>\n",
              "      <td id=\"T_d5f14_row10_col6\" class=\"data row10 col6\" >0.8932</td>\n",
              "      <td id=\"T_d5f14_row10_col7\" class=\"data row10 col7\" >0.8945</td>\n",
              "      <td id=\"T_d5f14_row10_col8\" class=\"data row10 col8\" >0.4890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row11\" class=\"row_heading level0 row11\" >lda</th>\n",
              "      <td id=\"T_d5f14_row11_col0\" class=\"data row11 col0\" >Linear Discriminant Analysis</td>\n",
              "      <td id=\"T_d5f14_row11_col1\" class=\"data row11 col1\" >0.9468</td>\n",
              "      <td id=\"T_d5f14_row11_col2\" class=\"data row11 col2\" >0.9865</td>\n",
              "      <td id=\"T_d5f14_row11_col3\" class=\"data row11 col3\" >0.9468</td>\n",
              "      <td id=\"T_d5f14_row11_col4\" class=\"data row11 col4\" >0.9479</td>\n",
              "      <td id=\"T_d5f14_row11_col5\" class=\"data row11 col5\" >0.9467</td>\n",
              "      <td id=\"T_d5f14_row11_col6\" class=\"data row11 col6\" >0.8932</td>\n",
              "      <td id=\"T_d5f14_row11_col7\" class=\"data row11 col7\" >0.8944</td>\n",
              "      <td id=\"T_d5f14_row11_col8\" class=\"data row11 col8\" >0.5420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row12\" class=\"row_heading level0 row12\" >nb</th>\n",
              "      <td id=\"T_d5f14_row12_col0\" class=\"data row12 col0\" >Naive Bayes</td>\n",
              "      <td id=\"T_d5f14_row12_col1\" class=\"data row12 col1\" >0.6650</td>\n",
              "      <td id=\"T_d5f14_row12_col2\" class=\"data row12 col2\" >0.9028</td>\n",
              "      <td id=\"T_d5f14_row12_col3\" class=\"data row12 col3\" >0.6650</td>\n",
              "      <td id=\"T_d5f14_row12_col4\" class=\"data row12 col4\" >0.7581</td>\n",
              "      <td id=\"T_d5f14_row12_col5\" class=\"data row12 col5\" >0.6188</td>\n",
              "      <td id=\"T_d5f14_row12_col6\" class=\"data row12 col6\" >0.3093</td>\n",
              "      <td id=\"T_d5f14_row12_col7\" class=\"data row12 col7\" >0.3963</td>\n",
              "      <td id=\"T_d5f14_row12_col8\" class=\"data row12 col8\" >0.4570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row13\" class=\"row_heading level0 row13\" >qda</th>\n",
              "      <td id=\"T_d5f14_row13_col0\" class=\"data row13 col0\" >Quadratic Discriminant Analysis</td>\n",
              "      <td id=\"T_d5f14_row13_col1\" class=\"data row13 col1\" >0.6467</td>\n",
              "      <td id=\"T_d5f14_row13_col2\" class=\"data row13 col2\" >0.8951</td>\n",
              "      <td id=\"T_d5f14_row13_col3\" class=\"data row13 col3\" >0.6467</td>\n",
              "      <td id=\"T_d5f14_row13_col4\" class=\"data row13 col4\" >0.7846</td>\n",
              "      <td id=\"T_d5f14_row13_col5\" class=\"data row13 col5\" >0.5782</td>\n",
              "      <td id=\"T_d5f14_row13_col6\" class=\"data row13 col6\" >0.2681</td>\n",
              "      <td id=\"T_d5f14_row13_col7\" class=\"data row13 col7\" >0.3814</td>\n",
              "      <td id=\"T_d5f14_row13_col8\" class=\"data row13 col8\" >0.4350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_d5f14_level0_row14\" class=\"row_heading level0 row14\" >dummy</th>\n",
              "      <td id=\"T_d5f14_row14_col0\" class=\"data row14 col0\" >Dummy Classifier</td>\n",
              "      <td id=\"T_d5f14_row14_col1\" class=\"data row14 col1\" >0.5219</td>\n",
              "      <td id=\"T_d5f14_row14_col2\" class=\"data row14 col2\" >0.5000</td>\n",
              "      <td id=\"T_d5f14_row14_col3\" class=\"data row14 col3\" >0.5219</td>\n",
              "      <td id=\"T_d5f14_row14_col4\" class=\"data row14 col4\" >0.2724</td>\n",
              "      <td id=\"T_d5f14_row14_col5\" class=\"data row14 col5\" >0.3580</td>\n",
              "      <td id=\"T_d5f14_row14_col6\" class=\"data row14 col6\" >0.0000</td>\n",
              "      <td id=\"T_d5f14_row14_col7\" class=\"data row14 col7\" >0.0000</td>\n",
              "      <td id=\"T_d5f14_row14_col8\" class=\"data row14 col8\" >0.5850</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Processing:   0%|          | 0/65 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8551b75c613f41aeb893c8ee7364c36b"
            }
          },
          "metadata": {
            "application/vnd.jupyter.widget-view+json": {
              "colab": {
                "custom_widget_manager": {
                  "url": "https://ssl.gstatic.com/colaboratory-static/widgets/colab-cdn-widget-manager/b3e629b1971e1542/manager.min.js"
                }
              }
            }
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Compare baseline models\n",
        "\n",
        "From all the algorithms Decision Tree Classifier gives the best accuracy score using the pyracet and also in the above algorithms, so it is selected as best algorithm from the others."
      ],
      "metadata": {
        "id": "-wvsIPDpjwU8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# plot confusion matrix\n",
        "plot_model(best, plot = 'confusion_matrix')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "4ft1MGW5GQgU",
        "outputId": "f58161f9-f7b0-404c-b374-2347862b36e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plot feature importance\n",
        "plot_model(best, plot = 'feature')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "wXu1oIKPGVVs",
        "outputId": "f9e1ae53-824e-4070-e43e-6b00d7626ec6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": []
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Conclusion\n",
        "\n",
        "\n",
        "\n",
        "We have witnessed firsthand how well machine learning works in chess through this project, especially in KRKP endgames. By comparing algorithms with PyCaret, it was evident that the Decision Tree model has superior accuracy. This demonstrates how well the model captures the intricate, strategic subtleties of chess positions. Its performance in our analysis is evidence of both its practical relevance in game outcome prediction as well as its algorithmic robustness. The Decision Tree is a vital tool for comprehending and projecting chess moves because of its capacity to reduce intricate strategic decisions into simple paths. Despite concentrating on a particular chess scenario, this project establishes a foundation for further investigation into other strategic games and decision-making processes, which could broaden the scope of machine learning applications in strategic analysis and other fields."
      ],
      "metadata": {
        "id": "lknhlVfbl0Tj"
      }
    }
  ]
}
